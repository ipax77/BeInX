@using BlazorInvoice.Weblib.Forms
@using BlazorInvoice.Weblib.Modals
@using BlazorInvoice.Shared
@using BlazorInvoice.Shared.Interfaces
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using Microsoft.JSInterop
@using pax.XRechnung.NET.AnnotatedDtos
@using pax.XRechnung.NET.BaseDtos
@inherits InvoiceBaseComponent
@inject IInvoiceRepository InvoiceRepository
@inject IMauiPopupService PopupService

<div class="@(party is null ? "" : "visually-hidden")">
    <div class="mt-2">
        <EditForm EditContext="@editContext" FormName="PartyRequest">
            <div class="row">
                <div class="col-auto d-flex">
                    <div>
                        <label for="invoiceSearch" class="form-label">@Loc["Search"]</label>
                        <InputText class="form-control" id="invoiceSearch" @bind-Value="request.Filter" />
                    </div>
                    <div>
                        <i class="bi bi-x-lg text-danger pointer" @onclick="Reset"></i>
                    </div>
                </div>
            </div>
        </EditForm>
    </div>
    <div class="table-responsive text-nowrap mt-2" style="max-width: 800px; max-height: 80vh;">
        <h3>
            @(IsSeller? Loc["Sellers"] : Loc["Buyers"]) - # @totalCount.ToString("N0")
            @if (isLoading)
            {
                <span class="spinner-border spinner-border-sm text-danger ms-1" role="status">
                    <span class="visually-hidden">Loading...</span>
                </span>
            }
        </h3>
        <table class="table table-striped">
            <thead class="user-select-none table-light">
                <CascadingValue Value="request.TableOrders">
                    <tr>
                        <th scope="col" class="pointer" @onclick="@(e => SortList(e, "Name"))">
                            <SortArrow Property="Name">
                                Name
                            </SortArrow>
                        </th>
                        <th scope="col" class="pointer" @onclick="@(e => SortList(e, "Email"))">
                            <SortArrow Property="Email">
                                Email
                            </SortArrow>
                        </th>
                        <th></th>
                    </tr>
                </CascadingValue>
            </thead>
            <tbody>
                @if (totalCount == 0)
                {
                    <tr>
                        <td colspan="100">No data found.</td>
                    </tr>
                }
                else
                {
                    <Virtualize @ref="virtualizeComponent" ItemsProvider="LoadParties" Context="party" ItemSize="47"
                                SpacerElement="tr">
                        <ItemContent>
                            <tr @key="party" height="47px" class="pointer" @onclick="e => EditParty(party)">
                                <td>@party.Name</td>
                                <td>@party.Email</td>
                                <td>
                                    <button @onclick="e => DeleteParty(party)" @onclick:stopPropagation
                                            class="btn btn-sm btn-danger">
                                        Delete
                                    </button>
                                </td>
                            </tr>
                        </ItemContent>
                        <Placeholder>
                            <tr height="47px">
                                <td colspan="100">Loading ...</td>
                            </tr>
                        </Placeholder>
                    </Virtualize>
                }

            </tbody>
        </table>
    </div>
</div>
@if (party is not null && partyEditContext is not null)
{
    <div style="max-width: 800px;">
        <button type="button" class="btn btn-outline-light" @onclick="e => logoModal?.Show(party, partyId)">
            Edit
            Logo
        </button>
        <CascadingValue Value="partyEditContext" Name="partyEditContext">
            @if (IsSeller)
            {
                <SellerPartyForm Party="(SellerAnnotationDto)party" OnCancel="e => party = null"
                                 OnCodeListRequested="CodeListRequest"
                                 ShowDesc="true"
                                 OnValidSubmit="PartyChanged" />
            }
            else
            {
                <BuyerPartyForm Party="(BuyerAnnotationDto)party" OnCancel="e => party = null"
                                OnCodeListRequested="CodeListRequest"
                                ShowDesc="true"
                                OnValidSubmit="PartyChanged" />
            }
        </CascadingValue>
    </div>

}

<LogoModal @ref="logoModal" />
<CodeListModal @ref="codeListModal" OnSelected="CodeListSelected" />

@code {
    [Parameter, EditorRequired]
    public bool IsSeller { get; set; }
    InvoiceListRequest request = new();
    int totalCount = 0;
    bool isLoading;
    Virtualize<PartyListDto>? virtualizeComponent;
    EditContext editContext = null!;
    EditContext? partyEditContext;
    int partyId = 0;
    IPartyBaseDto? party;
    LogoModal? logoModal;
    CodeListModal? codeListModal;

    protected override async Task OnParametersSetAsync()
    {
        await Reload();
    }

    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(request);
        editContext.OnFieldChanged += FieldChanged;
        await SetCount();
        await base.OnInitializedAsync();
    }

    private async Task EditParty(PartyListDto interest)
    {
        isLoading = true;
        await InvokeAsync(StateHasChanged);
        partyId = interest.PartyId;
        party = IsSeller ? await InvoiceRepository.GetSeller(partyId)
        : await InvoiceRepository.GetBuyer(partyId);
        if (party is not null)
        {
            partyEditContext = IsSeller ? new EditContext((SellerAnnotationDto)party) : new EditContext((BuyerAnnotationDto)party);
            var logo = await InvoiceRepository.GetPartyLogo(partyId);
        }
        isLoading = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task DeleteParty(PartyListDto interest)
    {
        isLoading = true;
        await InvokeAsync(StateHasChanged);
        var result = await PopupService.DisplayAlert(Loc["Delete Party"], Loc["DeleteParty"], Loc["Delete"], Loc["Cancel"]);
        if (result)
        {
            await InvoiceRepository.DeleteParty(interest.PartyId);
            _ = Reload();
        }
        else
        {
            isLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task PartyChanged(IPartyBaseDto arg)
    {
        if (partyId == 0)
        {
            return;
        }
        isLoading = true;
        await InvokeAsync(StateHasChanged);
        await InvoiceRepository.UpdateParty(partyId, arg);
        party = null;
        partyId = 0;
        isLoading = false;
        partyEditContext = null;
        _ = Reload();
    }

    private void FieldChanged(object? sender, FieldChangedEventArgs e)
    {
        _ = Reload();
    }

    public void Reset()
    {
        request.Filter = string.Empty;
        _ = Reload();
    }

    private async Task SetCount(bool dry = false)
    {
        if (!dry)
        {
            isLoading = true;
            await InvokeAsync(() => StateHasChanged());
        }
        if (IsSeller)
        {
            totalCount = await InvoiceRepository.GetSellersCount(request);
        }
        else
        {
            totalCount = await InvoiceRepository.GetBuyersCount(request);
        }
        if (!dry)
        {
            isLoading = false;
            await InvokeAsync(() => StateHasChanged());
        }
    }

    private async ValueTask<ItemsProviderResult<PartyListDto>> LoadParties(ItemsProviderRequest prRequest)
    {
        request.Skip = prRequest.StartIndex;
        request.Take = Math.Min(prRequest.Count, totalCount - prRequest.StartIndex);
        List<PartyListDto> parties;
        if (IsSeller)
        {
            parties = await InvoiceRepository.GetSellers(request, prRequest.CancellationToken);
        }
        else
        {
            parties = await InvoiceRepository.GetBuyers(request, prRequest.CancellationToken);
        }

        return new ItemsProviderResult<PartyListDto>(parties, totalCount);
    }

    private async Task SortList(MouseEventArgs e, string property)
    {
        var exOrder = request.TableOrders.FirstOrDefault(f => f.PropertyName == property);
        if (e.ShiftKey)
        {
            if (exOrder == null)
            {
                request.TableOrders.Add(new TableOrder()
                {
                    PropertyName = property
                });
            }
            else
            {
                exOrder.Ascending = !exOrder.Ascending;
            }
        }
        else
        {
            request.TableOrders.Clear();
            request.TableOrders.Add(new TableOrder()
            {
                PropertyName = property,
                Ascending = exOrder == null ? false : !exOrder.Ascending
            });
        }
        await Reload();
    }

    private async Task Reload()
    {
        isLoading = true;
        await InvokeAsync(() => StateHasChanged());
        await SetCount(true);
        if (virtualizeComponent != null)
        {
            await InvokeAsync(async () =>
            {
                await virtualizeComponent.RefreshDataAsync();
                StateHasChanged();
            });
        }
        isLoading = false;
        await InvokeAsync(() => StateHasChanged());
    }

    private void CodeListRequest(string codeList)
    {
        codeListModal?.Show(codeList);
    }

    private void CodeListSelected(KeyValuePair<string, string> ent)
    {
        var codeList = ent.Key;
        var value = ent.Value;
        if (party is not null && codeList == "Country_Codes")
        {
            party.CountryCode = value;
        }
        editContext.Validate();
        FieldChanged(null, new FieldChangedEventArgs(new FieldIdentifier()));
    }
}