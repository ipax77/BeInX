@using BlazorInvoice.Localization
@using BlazorInvoice.Weblib.Services
@using BlazorInvoice.Shared
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.Extensions.Localization
@using pax.XRechnung.NET.AnnotatedDtos
@inject IStringLocalizer<InvoiceLoc> Loc
@implements IDisposable

<div class="p-2 alert alert-light">
    <p>
        @Loc["LineImpDesc"]
    </p>
    <pre>
Date&#09;Description&#09;Start&#09;End&#09;Duration&#09;€/h Sum
    </pre>
    <p>Example:</p>
    <pre>
        @DateTime.Today.ToShortDateString()&#09;Project A&#09;08:00&#09;12:00&#09;4:00&#09;50&#09;@(200.ToString("N2")) €
    </pre>
</div>
<div>
    <EditForm EditContext="editContext" FormName="lineimportform" OnValidSubmit="e => Import()">
        <div>
            <label class="form-label" for="invoicelinetext">
                Text
            </label>
            <InputTextArea id="invoicelinetext" class="form-control" rows="6" placeholder="@($"{DateTime.Today.ToShortDateString()}\tProject A\t08:00\t12:00\t4:00\t50\t{200.ToString("N2")} €")" @bind-Value="text" />
        </div>
        <div class="mt-2">
            <button type="submit" class="btn btn-outline-warning">@Loc["Import"]</button>
        </div>
    </EditForm>
    <div class="mt-1">
        @if (!string.IsNullOrEmpty(result?.Message))
        {
            <p class="text-danger">Import failed: @result.Message</p>
        }
        <div class="table-responsive">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>@Loc["Datum"]</th>
                        <th>@Loc["Beschreibung"]</th>
                        <th>@Loc["Start"]</th>
                        <th>@Loc["Ende"]</th>
                        <th>@Loc["Dauer"]</th>
                        <th>€/h</th>
                        <th>@Loc["Summe"]</th>
                    </tr>
                </thead>
                <tbody>
                    @if (result != null)
                    {
                        @foreach (var line in result.InvoiceLines)
                        {
                            <tr>
                                <td>@line.Id</td>
                                <td>@line.Description</td>
                                <td>@line.Name</td>
                                <td>@line.StartDate</td>
                                <td>@line.EndDate</td>
                                <td>@line.Quantity</td>
                                <td>@line.UnitPrice</td>
                                <td>@line.LineTotal €</td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback<List<InvoiceLineAnnotationDto>> OnLinesAdded { get; set; }

    EditContext editContext = null!;
    string text = string.Empty;
    LineImportResult? result;


    protected override void OnInitialized()
    {
        editContext = new(text);
        editContext.OnFieldChanged += FieldChanged;
        base.OnInitialized();
    }

    private void FieldChanged(object? sender, FieldChangedEventArgs e)
    {
        Import(true);
    }

    private void Import(bool dry = false)
    {
        result = LineImportService.ImportLines(text);
        if (!dry)
        {
            OnLinesAdded.InvokeAsync(result.InvoiceLines);
            result = null;
            text = string.Empty;
        }
    }

    public void Dispose()
    {
        editContext.OnFieldChanged -= FieldChanged;
    }
}