@using BlazorInvoice.Shared
@using Microsoft.JSInterop
@inherits InvoiceBaseComponent
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime;

<td>
    <div id="@id" class="btn-group" role="group" aria-label="Actions">
        <button type="button" class="btn btn-sm btn-outline-warning" data-bs-toggle="tooltip" data-bs-placement="right" data-bs-title="@Loc["Edit"]"
                @onclick="@(() => NavigationManager.NavigateTo($"create/{Invoice.InvoiceId}"))">
            <i class="bi bi-pencil-square"></i>
        </button>
        <button type="button" class="btn btn-sm btn-outline-success" data-bs-toggle="tooltip" data-bs-placement="right" data-bs-title="@Loc["Export"]"
                @onclick="e => OnExport.InvokeAsync(Invoice)">
            <i class="bi bi-snow2"></i>
        </button>
        @if (!Invoice.IsPaid)
        {
            <button type="button" class="btn btn-sm btn-outline-info" data-bs-toggle="tooltip" data-bs-placement="right" data-bs-title="@Loc["Set Paid"]"
                    @onclick="e => OnSetPaid.InvokeAsync(Invoice.InvoiceId)">
                <i class="bi bi-check-circle"></i>
            </button>
        }
        else
        {
            <button type="button" class="btn btn-sm btn-outline-light" data-bs-toggle="tooltip" data-bs-placement="right" data-bs-title="@Loc["Set Unpaid"]"
                    @onclick="e => OnSetUnPaid.InvokeAsync(Invoice.InvoiceId)">
                <i class="bi bi-x-circle"></i>
            </button>
        }
        <button type="button" class="btn btn-sm btn-outline-secondary" data-bs-toggle="tooltip" data-bs-placement="right" data-bs-title="@Loc["Copy"]"
                @onclick="e => OnCopy.InvokeAsync(Invoice.InvoiceId)">
            <i class="bi bi-files"></i>
        </button>
        <button type="button" class="btn btn-sm btn-outline-danger" data-bs-toggle="tooltip" data-bs-placement="right" data-bs-title="@Loc["Delete"]"
                @onclick="e => OnDelete.InvokeAsync(Invoice.InvoiceId)">
            <i class="bi bi-trash"></i>
        </button>
    </div>
</td>

@code {
    [Parameter, EditorRequired]
    public InvoiceListDto Invoice { get; set; }

    [Parameter]
    public EventCallback<InvoiceListDto> OnExport { get; set; }

    [Parameter]
    public EventCallback<int> OnSetPaid { get; set; }

    [Parameter]
    public EventCallback<int> OnSetUnPaid { get; set; }

    [Parameter]
    public EventCallback<int> OnCopy { get; set; }

    [Parameter]
    public EventCallback<int> OnDelete { get; set; }

    private string id => $"listbuttons{Invoice.InvoiceId}";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("enableTooltips", id);
        }
    }

    public override void UpdateState(object? sender)
    {
        try
        {
            JSRuntime.InvokeVoidAsync("enableTooltips", id);
        }
        finally
        {
            base.UpdateState(sender);
        }
    }

    public override void Dispose()
    {
        try
        {
            JSRuntime.InvokeVoidAsync("disableTooltips", id);
        }
        finally
        {
            base.Dispose();
        }
    }
}
