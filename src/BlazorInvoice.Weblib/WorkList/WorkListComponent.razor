@using BlazorInvoice.Shared
@using BlazorInvoice.Shared.Interfaces
@inherits InvoiceBaseComponent
@inject IInvoiceRepository InvoiceRepository
@inject IWorkListRepository WorkListRepository

<h3>Work List</h3>
<div class="mb-4">
    <h5>@Loc["Select or Create Buyer"]</h5>
    <select class="form-select" @bind="partyId" @bind:after="OnPartySelected">
        <option value="0">-- Select party --</option>
        @foreach (var party in parties)
        {
            <option value="@party.PartyId">@party.Name</option>
        }
    </select>
</div>

<h3>Entries</h3>
<div>
    @foreach (var entry in workEntries)
    {
        <div class="card mb-2 p-2">
            <input type="text" class="form-control mb-1" @bind="entry.Job" @oninput="() => OnFieldChanged()" />

            <input type="time" class="form-control mb-1" @bind="entry.StartTime" @oninput="() => OnFieldChanged()" />

            <input type="time" class="form-control mb-1" @bind="entry.EndTime" @oninput="() => OnFieldChanged()" />

            <input type="number" class="form-control mb-1" step="0.01" @bind="entry.HourlyRate"
                @oninput="() => OnFieldChanged()" />
        </div>
    }
</div>

@code {
    List<PartyListDto> parties = [];
    int partyId = 0;
    List<WorkEntryDto> workEntries = [];
    bool hasTempEntries;

    protected override async Task OnInitializedAsync()
    {
        parties = await InvoiceRepository.GetBuyers(new());

    }
    private async Task OnPartySelected()
    {
        hasTempEntries = await WorkListRepository.HasTempWorkEntries(partyId);
        // TODO: notify -> continue quesiton
        workEntries = await WorkListRepository.GetWorkEntires(partyId, false);
    }

    private async Task OnFieldChanged()
    {
        await WorkListRepository.SaveTempWorkEntriesAsync(workEntries, partyId);
    }
}