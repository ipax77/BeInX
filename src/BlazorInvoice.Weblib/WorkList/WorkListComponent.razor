@using BlazorInvoice.Shared
@using BlazorInvoice.Shared.Interfaces
@using BlazorInvoice.Weblib.Services
@using Microsoft.JSInterop
@using pax.BBToast;
@inherits InvoiceBaseComponent
@inject IInvoiceRepository InvoiceRepository
@inject IWorkListRepository WorkListRepository
@inject IJSRuntime JSRuntime
@inject IToastService ToastService

<h3>Work List</h3>
<div class="mb-4" style="max-width: 400px;">
    <h5>@Loc["Select or Create Buyer"]</h5>
    <select class="form-select" @bind="partyId" @bind:after="OnPartySelected">
        <option value="0">-- Select party --</option>
        @foreach (var party in parties)
        {
            <option value="@party.PartyId">@party.Name</option>
        }
    </select>
</div>

<div>
    <ul class="nav nav-tabs">
        @foreach (var party in parties)
        {
            <li class="nav-item">
                <button class="nav-link @(party.PartyId == partyId ? "active" : "")"
                        @onclick="() => partyId = party.PartyId">
                    @party.Name
                </button>
            </li>
        }
    </ul>

    @foreach (var party in parties)
    {
        <div class="tab-content @(party.PartyId == partyId ? "show active" : "visually-hidden")">
            <WorkEntriesComponent WorkEntries="GetEntriesByParty(party.PartyId)"
                                  PartyId="@party.PartyId"
                                  ColumnCount="@columnCount"
                                  OnFieldChanged="FieldChanged" />
        </div>
    }
</div>

@code {
    int columnCount = 5;
    List<PartyListDto> parties = [];
    int partyId = 0;
    int currentPartyId = 0;
    bool hasTempEntries;
    Lock updateLock = new();

    WorkEntrySnapShot? workEntrySnapShot;

    Dictionary<int, List<WorkEntryWeb>> tempEntries = new();
    HashSet<Guid> savedGuids = [];

    protected override async Task OnInitializedAsync()
    {
        parties = await InvoiceRepository.GetBuyers(new());
        await LoadSnapShot();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("registerCustomKeydownEvent");
        }
    }

    private async Task LoadSnapShot()
    {
        workEntrySnapShot = await WorkListRepository.GetWorkEntries();
    }

    private List<WorkEntryWeb> GetEntriesByParty(int partyId)
    {
        if (workEntrySnapShot == null || !workEntrySnapShot.EntriesByParty.ContainsKey(partyId))
        {
            return new List<WorkEntryWeb>();
        }
        return workEntrySnapShot.EntriesByParty[partyId].Select(s => new WorkEntryWeb(s, columnCount)).ToList();
    }

    private async Task OnPartySelected()
    {

    }

    private async Task FieldChanged(WorkEntryWeb entry)
    {
        if (workEntrySnapShot == null)
        {
            return;
        }
        lock (updateLock)
        {
            if (workEntrySnapShot.EntriesByParty.TryGetValue(entry.PartyId, out var entries))
            {
                var existingEntry = entries.FirstOrDefault(f => f.EntryGuid == entry.EntryGuid);
                if (existingEntry != null)
                {
                    entry.UpdateDto(existingEntry);
                }
                else
                {
                    entries.Add(entry.GetDto());
                }
            }
            else
            {
                workEntrySnapShot.EntriesByParty[entry.PartyId] = [entry.GetDto()];
            }
        }
    }

    private void DeleteEntry(Guid entryGuid, int partyId)
    {
        if (workEntrySnapShot?.EntriesByParty.TryGetValue(partyId, out var entries) == true)
        {
            var entryToRemove = entries.FirstOrDefault(e => e.EntryGuid == entryGuid);
            if (entryToRemove != null)
            {
                entries.Remove(entryToRemove);
            }
        }
    }


    private async Task SaveEntries()
    {
        if (workEntrySnapShot == null)
        {
            ToastService.ShowError(Loc["No work entries loaded."]);
            return;
        }
        await WorkListRepository.SaveWorkEntries(workEntrySnapShot);
        ToastService.ShowSuccess(Loc["Work entries saved successfully."]);
    }
}