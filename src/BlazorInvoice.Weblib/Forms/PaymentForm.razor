@using BlazorInvoice.Localization
@using BlazorInvoice.Shared.Interfaces
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.Extensions.Localization
@using pax.XRechnung.NET.AnnotatedDtos
@using pax.XRechnung.NET.BaseDtos
@inject IStringLocalizer<InvoiceLoc> Loc

<div>
    <EditForm EditContext="partyEditContext" FormName="InvoicePartyForm" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <div class="mb-3">
            <label for="iban" class="form-label">IBAN</label>
            <InputText class="form-control" id="iban" aria-describedby="ibandesc" @bind-Value="Payment.Iban" />
            <div>
                <ValidationMessage For="@(() => Payment.Iban)" />
            </div>
        </div>
        <div class="mb-3">
            <label for="bic" class="form-label">BIC</label>
            <InputText class="form-control" id="bic" aria-describedby="bicdesc" @bind-Value="Payment.Bic" />
            <div>
                <ValidationMessage For="@(() => Payment.Bic)" />
            </div>
        </div>
        <div class="mb-3">
            <label for="name" class="form-label">Bank Name</label>
            <InputText class="form-control" id="name" aria-describedby="namedesc" @bind-Value="Payment.Name" />
            <div>
                <ValidationMessage For="@(() => Payment.Name)" />
            </div>
        </div>
        <div class="mb-3">
            <label for="bt81" class="form-label">Payment Code</label>
            <div class="input-group">
                <InputText class="form-control" id="bt81" aria-describedby="bt81desc" @bind-Value="Payment.PaymentMeansTypeCode" />
                <button type="button" class="btn btn-sm btn-outline-light ms-1" @onclick="@(() => OnCodeListRequested.InvokeAsync("UNTDID_4461"))">Pick</button>
            </div>
            <small id="bt81desc" class="@descClass">
                @Loc["BT-81"] - UNTDID 4461
            </small>
            <div>
                <ValidationMessage For="@(() => Payment.PaymentMeansTypeCode)" />
            </div>
        </div>
        <div class="mt-3">
            <button type="button" class="btn btn-danger" @onclick="e => OnCancel.InvokeAsync()">Cancel</button>
            <button type="submit" class="btn btn-primary">Save</button>
        </div>
    </EditForm>
</div>

@code {
    [Parameter, EditorRequired]
    public PaymentAnnotationDto Payment { get; set; }

    [Parameter]
    public EventCallback<PaymentAnnotationDto> OnValidSubmit { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    [Parameter]
    public EventCallback<string> OnCodeListRequested { get; set; }

    [Parameter]
    public bool ShowDesc { get; set; } = true;

    [CascadingParameter(Name = "paymentEditContext")]
    public EditContext partyEditContext { get; set; } = null!;

    string descClass => ShowDesc ? "form-text text-muted" : "d-none";

    private async Task HandleValidSubmit()
    {
        await OnValidSubmit.InvokeAsync(Payment);
    }
}


