@using System.Globalization
@using BlazorInvoice.Shared
@using BlazorInvoice.Shared.Interfaces
@using pax.BBToast
@inherits InvoiceBaseComponent
@inject IUpdateService UpdateService
@inject IToastService ToastService
@inject IMauiPopupService PopupService

<nav class="navbar navbar-expand-lg bg-body-tertiary">
    <div class="container-fluid">
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarToggler01"
                aria-controls="navbarToggler01" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarToggler01">
            <a class="navbar-brand" href="#">
                <div class="p-1 bg-light rounded rounded-2">
                    <img src="./_content/BlazorInvoice.Weblib/images/beinx.svg" alt="beinx"
                         style="height: 25px;" />
                </div>
            </a>
            <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                <li class="nav-item">
                    <a class="nav-link" href="/">
                        <i class="bi bi-house-door"></i> @Loc["Dashboard"]
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="invoices">
                        <i class="bi bi-file-earmark-text"></i> @Loc["Invoices"]
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="create">
                        <i class="bi bi-pencil-square"></i> @Loc["New Invoice"]
                    </a>
                </li>
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown">
                        <i class="bi bi-people"></i> @Loc["Parties"]
                    </a>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" href="parties/true">@Loc["Sellers"]</a></li>
                        <li><a class="dropdown-item" href="parties/false">@Loc["Buyers"]</a></li>
                    </ul>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="payments">
                        <i class="bi bi-credit-card"></i> @Loc["Means of Payments"]
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="import">
                        <i class="bi bi-upload"></i> @Loc["Import"]
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="time">
                        <i class="bi bi-upload"></i> @Loc["Time"]
                    </a>
                </li>

                <li class="nav-item">
                    <a class="nav-link" href="settings">
                        <i class="bi bi-gear"></i> @Loc["Settings"]
                    </a>
                </li>
            </ul>
            <form class="d-flex" name="cultureselect">
                <fieldset>
                    <label class="form-label">
                        <select class="form-select" required @bind="cultureName" @bind:after="@(() => SetCulture(cultureName))">
                            <option value="iv">@Loc["Language"] ..</option>
                            @foreach (var culture in ConfigService.GetSupportedCultures())
                            {
                                <option value="@culture.TwoLetterISOLanguageName">@culture.NativeName</option>
                            }
                        </select>
                    </label>
                </fieldset>
            </form>
            <div class="ms-3 align-self-center" style="width: 100px;">
                @if (updateProgress > 0)
                {
                    <div class="progress" role="progressbar" aria-label="Success striped example" aria-valuenow="@updateProgress" aria-valuemin="0" aria-valuemax="100">
                        <div class="progress-bar progress-bar-striped bg-success" style="width: @(updateProgress)%">@updateProgress %</div>
                    </div>
                }
                else
                {
                    <span class="badge text-bg-light pointer" @onclick="e => CheckForUpdates()">v @UpdateService.GetCurrentVersion()</span>
                }
            </div>
        </div>
    </div>
</nav>

@code {
    AppConfigDto appConfig = new();
    string cultureName = "iv";
    private int updateProgress = 0;
    private bool isCheckingForUpdate = false;

    protected override async Task OnInitializedAsync()
    {
        appConfig = await ConfigService.GetConfig();
        if (!string.IsNullOrEmpty(appConfig.CultureName))
        {
            cultureName = appConfig.CultureName;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (appConfig.CheckForUpdates)
            {
                await Task.Delay(3000);
                await CheckForUpdates(true);
            }
        }
    }

    private async Task SetCulture(string name)
    {
        var cultureInfo = new CultureInfo(name);
        CultureInfo.CurrentCulture = cultureInfo;
        CultureInfo.DefaultThreadCurrentCulture = cultureInfo;
        CultureInfo.DefaultThreadCurrentUICulture = cultureInfo;

        appConfig.CultureName = cultureInfo.TwoLetterISOLanguageName;
        await ConfigService.UpdateConfig(appConfig);
    }

    private async Task CheckForUpdates(bool init = false)
    {
        if (isCheckingForUpdate)
        {
            ToastService.ShowInfo("Update check is already in progress.", "Update Check");
            return;
        }
        try
        {
            var updateAvailable = await UpdateService.CheckForUpdates();
            if (!updateAvailable)
            {
                if (!init)
                {
                    ToastService.ShowInfo("No updates available.", "Update Check");
                }
                return;
            }
            var result = await PopupService.DisplayAlert(Loc["Update Available"], Loc["UpdateAvailable"], Loc["Yes"], Loc["No"]);
            if (result)
            {
                ToastService.ShowInfo("Starting update...");
                UpdateService.UpdateProgress += UpdateProgress;
                await UpdateService.UpdateApp();
                UpdateService.UpdateProgress -= UpdateProgress;
            }
            else
            {
                ToastService.ShowInfo("Update cancelled.", "Update Check");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error checking for updates: {ex.Message}", "Update Check");
        }
        finally
        {
            isCheckingForUpdate = false;
            updateProgress = 0;
            await InvokeAsync(StateHasChanged);
        }
    }

    private void UpdateProgress(object? sender, UpdateProgressEventArgs eventArgs)
    {
        updateProgress = eventArgs.Progress;
        InvokeAsync(StateHasChanged);
    }
}