@using BlazorInvoice.Shared
@using BlazorInvoice.Shared.Interfaces
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.JSInterop
@using pax.BBToast
@inherits InvoiceBaseComponent
@inject IBackupService BackupService
@inject IToastService ToastService
@inject IMauiPathService MauiPathService
@inject IMauiPopupService PopupService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<h3 class="mt-2">@Loc["Settings"]</h3>
<div style="max-width: 800px;">
    <EditForm EditContext="editContext" FormName="ConfigFrom" OnValidSubmit="SaveChanges">
        <div class="mb-3">
            <label for="kosit" class="form-label">@Loc["Kosit validator uri"]</label>
            <InputText class="form-control" id="kosit" aria-describedby="kositdesc" @bind-Value="appConfig.SchematronValidationUri" />
            <small id="kositdesc" class="form-text">@Loc["KositDesc", "https://pax77.org/validate"]</small>
            <small class="text-warning">@Loc["KositWarn"] <a href="https://github.com/ipax77/BeInX/blob/main/PRIVACY_POLICY.md#external-validation-services">@Loc["External Link"]</a></small>
        </div>
        <div class="mb-1 form-check form-switch">
            <label for="desc" class="form-label">@Loc["Show Form Descriptions"]</label>
            <InputCheckbox id="desc" class="form-check-input" role="switch" @bind-Value="appConfig.ShowFormDescriptions" />
        </div>
        <div class="mb-1 form-check form-switch">
            <label for="xmlvalidation" class="form-label">@Loc["Show XML Validation Warnings"]</label>
            <InputCheckbox id="xmlvalidation" class="form-check-input" role="switch" @bind-Value="appConfig.ShowValidationWarnings" />
        </div>
        <div class="mb-3 form-check form-switch">
            <label for="updatecheck" class="form-label">@Loc["Update Check"]</label>
            <InputCheckbox id="updatecheck" class="form-check-input" role="switch" aria-describedby="updatecheckdesc" @bind-Value="appConfig.CheckForUpdates" />
            <small id="updatecheckdesc" class="form-text">@Loc["UpdateCheck"]</small>
        </div>
        <div class="mb-3 p-3 border rounded">
            <h3>@Loc["Backup Options"]</h3>
            <div class="mb-1">
                <label for="backupfolder" class="form-label">@Loc["Folder"]</label>
                <div class="input-group">
                    <InputText id="backupfolder" class="form-control" @bind-Value="appConfig.BackupFolder" />
                    <button type="button" class="btn btn-sm btn-outline-light" @onclick="PickBackupFolder">Pick</button>
                </div>
            </div>
            <div class="mb-1">
                <label for="bint" class="form-label">@Loc["Interval"]</label>
                <InputSelect id="bint" class="form-select" @bind-Value="appConfig.BackupInterval">
                    @foreach (BackupInterval backupInterval in Enum.GetValues(typeof(BackupInterval)))
                    {
                        <option value="@backupInterval">@Loc[backupInterval.Desc()]</option>
                    }
                </InputSelect>
            </div>
        </div>
        <div class="mb-3 p-3 border rounded">
            <h3>@Loc["Export Options"]</h3>
            <div class="mb-1">
                <div class="form-switch form-check">
                    <label for="pdf" class="form-check-label">@Loc["Embed PDF"]</label>
                    <InputCheckbox id="pdf" class="form-check-input" aria-describedby="pdfdesc" role="switch" @bind-Value="appConfig.ExportEmbedPdf" />
                </div>
                <small id="pdfdesc" class="form-text">@Loc["EmbedPDF"]</small>
            </div>
            <div class="mb-1">
                <div class="form-switch form-check">
                    <label for="validate" class="form-check-label">@Loc["Validate XML"]</label>
                    <InputCheckbox id="validate" class="form-check-input" aria-describedby="validatedesc" role="switch" @bind-Value="appConfig.ExportValidate" />
                </div>
                <small id="validatedesc" class="form-text">@Loc["ValidateXML"]</small>
            </div>
            <div class="mb-1">
                <div class="form-switch form-check">
                    <label for="finalize" class="form-check-label">@Loc["Finalize"]</label>
                    <InputCheckbox id="finalize" class="form-check-input" aria-describedby="finalizedesc" role="switch" @bind-Value="appConfig.ExportFinalize" />
                </div>
                <small id="finalizedesc" class="form-text">@Loc["FinalizeDesc"]</small>
            </div>
            <div class="mb-1" style="max-width: 300px;">
                <label for="exporttpye" class="form-label">Type</label>
                <InputSelect id="exporttype" class="form-select" @bind-Value="appConfig.ExportType">
                    @foreach (ExportType exportType in Enum.GetValues(typeof(ExportType)))
                    {
                        <option value="@exportType">@exportType</option>
                    }
                </InputSelect>
            </div>
        </div>
        <div class="mb-3 p-3 border rounded">
            <h3>@Loc["Stats Options"]</h3>
            <div class="mb-1">
                <label for="startday" class="form-label">@Loc["Month End Day"]</label>
                <InputNumber id="startday" class="form-control" step="1" min="1" max="26" aria-describedby="startdaydesc" @bind-Value="appConfig.StatsMonthEndDay" />
                <small id="startdaydesc" class="form-text">@Loc["StatsOptions"]</small>
            </div>
            <div class="mb-1">
                <div class="form-switch form-check">
                    <label for="statsperiod" class="form-check-label">@Loc["Monthly Period"]</label>
                    <InputCheckbox id="statsperiod" class="form-check-input" aria-describedby="statsperioddesc" role="switch" @bind-Value="appConfig.StatsIsMonthNotQuater" />
                </div>
                <small id="statsperioddesc" class="form-text">@Loc["MonthlyPeriod"]</small>
            </div>
        </div>
        <hr />
        <div class="mb-3">
            <p>@MauiPathService.GetAppFolder()</p>
        </div>
        <div id="configbuttons" class="btn-group mt-2 mb-5">
            <button type="submit" class="btn btn-outline-success">@Loc["Save"]</button>
            @if (isLoading)
            {
                <BlazorInvoice.Weblib.Modals.LoadingIndicator />
            }
            else
            {
                <button type="button" class="btn btn-outline-warning" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-title="@Loc["Backup Database"]"
                        @onclick="Backup">
                    @Loc["Backup"]
                </button>
                <button type="button" class="btn btn-outline-danger" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-title="@Loc["Restore Database"]"
                        @onclick="Restore">
                    @Loc["Restore"]
                </button>
            }
        </div>
    </EditForm>
</div>

@code {
    private AppConfigDto appConfig = new();

    EditContext editContext = null!;
    bool hasChanges;
    bool isLoading;

    protected override async Task OnInitializedAsync()
    {
        appConfig = await ConfigService.GetConfig();
        editContext = new EditContext(appConfig);
        editContext.OnFieldChanged += OnFieldChanged;
        if (string.IsNullOrEmpty(appConfig.BackupFolder))
        {
            appConfig.BackupFolder = MauiPathService.GetDesktopFolder();
        }
        NavigationManager.LocationChanged += LeavePage;
    }

    private async void LeavePage(object? sender, LocationChangedEventArgs e)
    {
        if (hasChanges)
        {
            var result = await PopupService.DisplayAlert(Loc["Warning"], Loc["SaveWarning"], Loc["Save"], Loc["No"]);
            if (result)
            {
                await SaveChanges();
            }
            else
            {
                hasChanges = false;
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("enableTooltips", "configbuttons");
        }
    }

    private void OnFieldChanged(object? sender, FieldChangedEventArgs e)
    {
        hasChanges = true;
    }

    private async Task SaveChanges()
    {
        if (hasChanges)
        {
            await ConfigService.UpdateConfig(appConfig);
            hasChanges = false;
            ToastService.ShowSuccess("Settings have been saved successfully.");
        }
    }

    private async Task PickBackupFolder()
    {
        var folder = await MauiPathService.PickFolder();
        if (!string.IsNullOrEmpty(folder))
        {
            appConfig.BackupFolder = folder;
            hasChanges = true;
        }
        await InvokeAsync(StateHasChanged);
    }

    public async Task Backup()
    {
        isLoading = true;
        await InvokeAsync(StateHasChanged);
        var folder = appConfig.BackupFolder;
        var result = await BackupService.Backup(folder);
        if (result.Success)
        {
            ToastService.ShowSuccess($"Backup successfully created at {folder}");
        }
        else
        {
            ToastService.ShowError($"Backup failed: {result.Error}");
        }
        isLoading = false;
        await InvokeAsync(StateHasChanged);
    }

    public async Task Restore()
    {
        isLoading = true;
        await InvokeAsync(StateHasChanged);
        var backupFile = await MauiPathService.PickFile();
        var result = BackupService.Restore(backupFile ?? string.Empty);
        if (result.Success)
        {
            editContext.OnFieldChanged -= OnFieldChanged;
            appConfig = await ConfigService.GetConfig();
            editContext = new EditContext(appConfig);
            editContext.OnFieldChanged += OnFieldChanged;
            ToastService.ShowSuccess($"Backup successful!");
        }
        else
        {
            ToastService.ShowError($"Backup failed: {result.Error}");
        }
        isLoading = false;
        await InvokeAsync(StateHasChanged);
    }


    public override void Dispose()
    {
        if (editContext != null)
        {
            editContext.OnFieldChanged -= OnFieldChanged;
        }
        NavigationManager.LocationChanged -= LeavePage;
        try
        {
            JSRuntime.InvokeVoidAsync("disableTooltips", "configbuttons");
        }
        finally
        {
            base.Dispose();
        }
    }
}