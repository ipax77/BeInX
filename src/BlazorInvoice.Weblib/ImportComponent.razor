@using BlazorInvoice.Shared.Interfaces
@using System.Xml.Serialization
@using System.Text
@using pax.BBToast
@using pax.XRechnung.NET
@using pax.XRechnung.NET.XmlModels
@inherits InvoiceBaseComponent
@inject IInvoiceRepository InvoiceRepository
@inject NavigationManager NavigationManager
@inject IToastService ToastService
@inject IMauiPathService PathService

<div class="container-fluid mt-3">
    <div class="alert alert-dark d-flex align-items-center" style="max-width: 600px;">
        <div class="fw-bold">
            @Loc["ImpDesc"]
        </div>
        <div class="ms-3">
            <button type="button" class="btn btn-outline-light" @onclick="SelectFile">@Loc["Select File"]</button>
        </div>
    </div>
    <div>
        <textarea class="form-control" rows="12" @bind="xmlText" @bind:after="Validate"></textarea>
    </div>
    @if (!string.IsNullOrEmpty(message))
    {
        <div class="alert alert-info mt-3">@message</div>
    }
    @if (xmlInvoice != null)
    {
        <div class="btn-group mt-2 mb-3">
            <button type="button" class="btn btn-outline-warning" @onclick="e => Import()">@Loc["Import"]</button>
        </div>
    }

    <div class="mb-5">
        @if (schemaResult != null)
        {
            <h3>Schema Validation Result</h3>
            <ValidationResultComponent Result="schemaResult" />
        }
        @if (schematronResult != null)
        {
            <h3 class="mt-3">Schematron Validation Result</h3>
            <ValidationResultComponent Result="schematronResult" />
        }
    </div>
</div>

@code {
    private string xmlText = string.Empty;
    private string message = string.Empty;

    InvoiceValidationResult? schemaResult;
    InvoiceValidationResult? schematronResult;
    XmlInvoice? xmlInvoice;

    private async Task Validate()
    {
        try
        {
            message = string.Empty;
            var serializer = new XmlSerializer(typeof(XmlInvoice));
            using var stream = new MemoryStream(Encoding.UTF8.GetBytes(xmlText));
            xmlInvoice = (XmlInvoice?)serializer.Deserialize(stream);
            if (xmlInvoice is null)
            {
                message = Loc["Failed to parse XML."];
                return;
            }

            schemaResult = XmlInvoiceValidator.Validate(xmlInvoice);
            if (!schemaResult.IsValid)
            {
                message = $"XML {Loc["ValFailed"]}";
                ToastService.ShowError($"XML {Loc["ValFailed"]}");
                await InvokeAsync(StateHasChanged);
                return;
            }

            var config = await ConfigService.GetConfig();
            if (!string.IsNullOrEmpty(config.SchematronValidationUri))
            {
                schematronResult = await XmlInvoiceValidator.ValidateSchematron(xmlInvoice, new Uri(config.SchematronValidationUri));

                if (!schematronResult.IsValid)
                {
                    message = $"Schematron {Loc["ValFailed"]}";
                    ToastService.ShowError($"Schematron {Loc["ValFailed"]}");
                    await InvokeAsync(StateHasChanged);
                    return;
                }
            }
        }
        catch (Exception ex)
        {
            message = $"Unexpected error: {ex.Message}";
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task Import()
    {
        if (xmlInvoice == null)
        {
            return;
        }
        try
        {
            var invoiceId = await InvoiceRepository.ImportInvoice(xmlInvoice);
            if (invoiceId == 0)
            {
                message = "Invoice import failed. Please check logs or contact support.";
                return;
            }

            NavigationManager.NavigateTo($"create/{invoiceId}");
        }
        catch (Exception ex)
        {
            message = $"Unexpected error: {ex.Message}";
        }
    }

    private async Task SelectFile()
    {
        try
        {
            var file = await PathService.PickFile();
            if (!string.IsNullOrEmpty(file) && File.Exists(file))
            {
                xmlText = File.ReadAllText(file);
                await Validate();
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError("Failed picking file: " + ex.Message);
        }
    }
}