@inject BbToastJsInterop JsInterop
@implements IDisposable

<div id="@ToastOptions.Id" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
    <div class="toast-header @_toastSetup.BsBgColor @_toastSetup.TextColor">
        <i class="@_toastSetup.Icon me-2"></i>
        <strong class="me-auto">@ToastOptions.Title</strong>
        <small>@ToastOptions.SmallTitle</small>
        <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
    </div>
    <div class="toast-body">
        @ToastOptions.Message
    </div>
</div>

@code {
    [CascadingParameter]
    public ToastContainer? ToastContainer { get; set; }

    [Parameter, EditorRequired]
    public ToastOptions ToastOptions { get; set; } = new();

    private CancellationTokenSource cts = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsInterop.ShowToast(ToastOptions.Id.ToString());
            if (ToastOptions.Duration > 0)
            {
                _ = Task.Run(async () =>
                {
                    await Task.Delay(ToastOptions.Duration, cts.Token);
                    Cleanup();
                }, cts.Token);
            }
        }
    }

    public void Cleanup()
    {
        ToastContainer?.RemoveToast(ToastOptions.Id);
    }

    ToastSetup _toastSetup => ToastOptions.Type switch
    {
        ToastType.Info => new ToastSetup("bg-info", "bi bi-info-circle", "text-light-emphasis"),
        ToastType.Success => new ToastSetup("bg-success", "bi bi-brightness-low", "text-light-emphasis"),
        ToastType.Warning => new ToastSetup("bg-warning", "bi bi-cone-striped", "text-dark"),
        ToastType.Error => new ToastSetup("bg-danger", "bi bi-exclamation-triangle", "text-light-emphasis"),
        _ => new ToastSetup("Unknown", "bi bi-question-circle", "text-light")
    };

    public void Dispose()
    {
        cts.Dispose();
        Cleanup();
    }

    private record ToastSetup(string BsBgColor, string Icon, string TextColor);
}

