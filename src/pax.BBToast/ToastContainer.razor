@inject IToastService ToastService
@implements IDisposable

@if (_toastOptions.Count > 0)
{
    <div class="toast-container position-fixed top-0 end-0 p-3 zindex-toast" aria-live="polite" aria-atomic="true">
        <CascadingValue Value="this" IsFixed="true">
            @foreach (var options in _toastOptions)
            {
                <ToastComponent @key="options" ToastOptions="options" />
            }
        </CascadingValue>
    </div>
}

@code {
    private const int MaxToasts = 7;
    private readonly List<ToastOptions> _toastOptions = [];
    private readonly Queue<ToastOptions> _toastQueue = [];
    private readonly Lock _lock = new();

    protected override void OnInitialized()
    {
        ToastService.OnShow += HandleShowToast;
    }

    private void HandleShowToast(ToastOptions options)
    {
        lock (_lock)
        {
            if (_toastOptions.Count >= MaxToasts)
            {
                _toastQueue.Enqueue(options);
            }
            else
            {
                _toastOptions.Add(options);
            }
        }
        InvokeAsync(StateHasChanged);
    }

    public void RemoveToast(Guid guid)
    {
        lock (_lock)
        {
            var toast = _toastOptions.FirstOrDefault(t => t.Id == guid);
            if (toast != null)
            {
                _toastOptions.Remove(toast);

                if (_toastQueue.Count > 0)
                {
                    var nextToast = _toastQueue.Dequeue();
                    _toastOptions.Add(nextToast);
                }
            }
        }
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        ToastService.OnShow -= HandleShowToast;
    }
}